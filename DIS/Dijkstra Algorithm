weight_matrix = [
    [0, 7, 0, 0, 9, 2, 0, 0, 0, 0, 0, 0],

    [7, 0, 5, 4, 8, 2, 0, 0, 0, 0, 0, 0],

    [0, 5, 0, 2, 9, 0, 0, 0, 0, 0, 0, 0],

    [0, 4, 2, 0, 3, 0, 8, 3, 0, 0, 0, 0],

    [9, 8, 9, 3, 0, 3, 5, 1, 7, 0, 0, 0],

    [2, 2, 0, 0, 3, 0, 0, 6, 1, 0, 0, 0],

    [0, 0, 0, 8, 5, 0, 0, 6, 0, 4, 4, 0],

    [0, 0, 0, 3, 1, 6, 6, 0, 2, 7, 8, 5],

    [0, 0, 0, 0, 7, 1, 0, 2, 0, 0, 6, 1],

    [0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 10, 0],

    [0, 0, 0, 0, 0, 0, 4, 8, 6, 10, 0, 3],

    [0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 3, 0]
]

n = len(weight_matrix)
print("Enter start vertex (from 1 to 12):")
start = int(input()) - 1
print("Enter end vertex (from 1 to 12):")
end = int(input()) - 1

visited = [False] * n
distances = [float('inf')] * n
distances[start] = 0


def go_from():
    index = 0
    min_distance = float('inf')
    for i in range(n):
        if distances[i] < min_distance and (not visited[i]):
            min_distance = distances[i]
            index = i
    return index


while False in visited:
    u = go_from()
    for v in range(n):
        if weight_matrix[u][v] != 0 and (not visited[v]):
            distances[v] = min(distances[v], distances[u] + weight_matrix[u][v])
    visited[u] = True

print("Shortest path from vertex", start + 1, "to vertex", end + 1, "is", distances[end])
print("distances from vertex", start + 1, ":", distances)
