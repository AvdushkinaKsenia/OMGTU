weight_matrix = [
    [0, 7, 0, 0, 9, 2, 0, 0, 0, 0, 0, 0],

    [7, 0, 5, 4, 8, 2, 0, 0, 0, 0, 0, 0],

    [0, 5, 0, 2, 9, 0, 0, 0, 0, 0, 0, 0],

    [0, 4, 2, 0, 3, 0, 8, 3, 0, 0, 0, 0],

    [9, 8, 9, 3, 0, 3, 5, 1, 7, 0, 0, 0],

    [2, 2, 0, 0, 3, 0, 0, 6, 1, 0, 0, 0],

    [0, 0, 0, 8, 5, 0, 0, 6, 0, 4, 4, 0],

    [0, 0, 0, 3, 1, 6, 6, 0, 2, 7, 8, 5],

    [0, 0, 0, 0, 7, 1, 0, 2, 0, 0, 6, 1],

    [0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 10, 0],

    [0, 0, 0, 0, 0, 0, 4, 8, 6, 10, 0, 3],

    [0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 3, 0]
]


def dijkstra(matrix, start, end):
    n = len(matrix)
    distances = [float('inf')] * n
    distances[start] = 0
    visited = [False] * n
    path = [-1] * n

    for _ in range(n):
        min_distance = float('inf')
        min_index = -1
        for i in range(n):
            if not visited[i] and distances[i] < min_distance:
                min_distance = distances[i]
                min_index = i

        if min_index == -1:
            break

        visited[min_index] = True

        for i in range(n):
            if not visited[i] and matrix[min_index][i] > 0:
                new_distance = distances[min_index] + matrix[min_index][i]
                if new_distance < distances[i]:
                    distances[i] = new_distance
                    path[i] = min_index

    shortest_path = []
    current = end
    while current != -1:
        shortest_path.insert(0, current + 1)
        current = path[current]

    return distances[end], shortest_path


start_vertex = int(input("Start vertex: ")) - 1
end_vertex = int(input("End vertex: ")) - 1

distance, shortest_path = dijkstra(weight_matrix, start_vertex, end_vertex)
print("Shortest distance:", distance)
print("Shortest path:", shortest_path)
