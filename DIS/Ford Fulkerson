#Поиск в ширину
def bfs(graph, start, end, parent):
    visited = [False] * len(graph)
    queue = []
    queue.append(start)
    visited[start] = True

    while queue:
        u = queue.pop(0)
        for ind, val in enumerate(graph[u]):
            if visited[ind] == False and val > 0:
                queue.append(ind)
                visited[ind] = True
                parent[ind] = u

    return True if visited[end] else False

def ford_fulkerson(graph, source, sink):
    parent = [-1] * len(graph)
    max_flow = 0

    while bfs(graph, source, sink, parent):
        path_flow = float("Inf")
        s = sink
        while s != source:
            path_flow = min(path_flow, graph[parent[s]][s])
            s = parent[s]

        max_flow += path_flow
        v = sink
        while v != source:
            u = parent[v]
            graph[u][v] -= path_flow
            graph[v][u] += path_flow
            v = parent[v]

    return max_flow

graph = [[0, 7, 4, 0, 0, 0],
         [0, 0, 4, 0, 2, 0],
         [0, 0, 0, 4, 8, 0],
         [0, 0, 0, 0, 0, 12],
         [0, 0, 0, 4, 0, 5],
         [0, 0, 0, 0, 0, 0]]

source, sink = 0, 5
print("Max network flow: ", ford_fulkerson(graph, source, sink))
